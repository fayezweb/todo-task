[{"C:\\fnt\\todo-task\\my-app\\src\\index.js":"1","C:\\fnt\\todo-task\\my-app\\src\\App.js":"2","C:\\fnt\\todo-task\\my-app\\src\\reportWebVitals.js":"3","C:\\fnt\\todo-task\\my-app\\src\\components\\NotMatch.js":"4","C:\\fnt\\todo-task\\my-app\\src\\components\\TaskForm.js":"5","C:\\fnt\\todo-task\\my-app\\src\\components\\Task.js":"6","C:\\fnt\\todo-task\\my-app\\src\\components\\UpdateTaskForm.js":"7","C:\\fnt\\todo-task\\my-app\\src\\components\\TaskDetails.js":"8","C:\\fnt\\todo-task\\my-app\\src\\components\\TaskHeader.js":"9"},{"size":547,"mtime":1607925229030,"results":"10","hashOfConfig":"11"},{"size":1451,"mtime":1608440168446,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":370,"mtime":1608177652554,"results":"14","hashOfConfig":"11"},{"size":2632,"mtime":1608522919478,"results":"15","hashOfConfig":"11"},{"size":4231,"mtime":1608440510331,"results":"16","hashOfConfig":"11"},{"size":2606,"mtime":1608440025859,"results":"17","hashOfConfig":"11"},{"size":827,"mtime":1608440005073,"results":"18","hashOfConfig":"11"},{"size":988,"mtime":1608199149440,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"f9s13g",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\fnt\\todo-task\\my-app\\src\\index.js",[],["43","44"],"C:\\fnt\\todo-task\\my-app\\src\\App.js",["45","46"],"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport TaskForm from \"./components/TaskForm\";\nimport Task from \"./components/Task\";\nimport NotMatch from \"./components/NotMatch\";\nimport { useState } from \"react\";\nimport { createContext } from \"react\";\nimport { useEffect } from \"react\";\nimport UpdateTaskForm from \"./components/UpdateTaskForm\";\nimport axios from 'axios'\nimport ReactPaginate from 'react-paginate';\n//create task context\nexport const tasksContext = createContext();\n\n\nfunction App() {\n  const [task, setTask] = useState([]);\n  useEffect(() => {\n    initializeLocalData();\n  }, []);\n\n  const initializeLocalData = () => {\n    const tasksJON = localStorage.getItem('Tasks');\n    if (typeof tasksJON !== 'undefined' && tasksJON !== null) {\n      const tasks = JSON.parse(tasksJON);\n      setTask(tasks);\n    }\n  }\n  return (\n    <tasksContext.Provider value={[task, setTask]} className=\"apps\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Task />\n          </Route>\n          <Route exact path=\"/home\">\n            <Task />\n          </Route>\n          <Route path='/taskForm'>\n            <TaskForm />\n          </Route>\n          <Route path='/update/:id'>\n            <UpdateTaskForm />\n          </Route>\n          <Route path='*'>\n            <NotMatch />\n          </Route>\n        </Switch>\n      </Router>\n    </tasksContext.Provider>\n  );\n}\n\nexport default App;\n","C:\\fnt\\todo-task\\my-app\\src\\reportWebVitals.js",[],"C:\\fnt\\todo-task\\my-app\\src\\components\\NotMatch.js",[],"C:\\fnt\\todo-task\\my-app\\src\\components\\TaskForm.js",["47","48","49"],"C:\\fnt\\todo-task\\my-app\\src\\components\\Task.js",["50","51","52"],"import React, { useState, useEffect } from 'react';\r\nimport { useContext } from 'react';\r\nimport { tasksContext } from '../App';\r\nimport TaskTaskDetails from './TaskDetails';\r\nimport TaskHeader from './TaskHeader';\r\nimport axios from 'axios'\r\nimport './Css/Task.css'\r\nimport ReactPaginate from 'react-paginate';\r\nconst Task = (props) => {\r\n    const [task, setTask] = useContext(tasksContext);\r\n    const [searchTasks, setSearchTask] = useState([]);\r\n    const [offset, setOffset] = useState(0);\r\n    const [perPage] = useState(2);\r\n    const [pageCount, setPageCount] = useState(0)\r\n    useEffect(() => {\r\n        setSearchTask(task);\r\n    }, [task]);\r\n    console.log(pageCount)\r\n    // useEffect(() => {\r\n    //     setPageCount(Math.ceil(searchTasks.length / perPage));\r\n    // }, [])\r\n\r\n    //handle delete task\r\n    const onDeleteTask = (index) => {\r\n        const tasks = task;\r\n        const deleteTask = tasks.splice(index, 1);\r\n        const filterTasks = task.filter(taskData => taskData.index !== index);\r\n        setTask(filterTasks);\r\n        localStorage.setItem('Tasks', JSON.stringify(task));\r\n    }\r\n    // handle filter task\r\n    const handleOnChange = (e) => {\r\n        const newValue = e.target.value.toLowerCase();\r\n        if (newValue.length > 0) {\r\n            const searchData = task.filter(function (item) {\r\n                const itemData = item.Title + ' ' + item.Priority + ' ' + item.id;\r\n                const textData = newValue;\r\n                return itemData.toLowerCase().indexOf(textData) > -1;\r\n            });\r\n            setSearchTask(searchData);\r\n        } else {\r\n            setSearchTask(task)\r\n        }\r\n\r\n    }\r\n    //pagination \r\n\r\n\r\n    const handlePageClick = (e) => {\r\n        const selectedPage = e.selected;\r\n        setOffset(selectedPage + 1)\r\n    };\r\n    const slice = searchTasks.slice(offset, offset + perPage);\r\n\r\n    useEffect(() => {\r\n        setPageCount(Math.ceil(searchTasks.length / perPage));\r\n        localStorage.setItem('pageCount', JSON.stringify(pageCount))\r\n    }, [pageCount]);\r\n    const getPageCout = () => {\r\n        const getPageCount = localStorage.getItem('Tasks');\r\n        if (typeof getPageCount !== 'undefined' && getPageCount !== null) {\r\n            const page = JSON.parse(getPageCount);\r\n            setPageCount(page);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getPageCout();\r\n    }, [])\r\n    console.log(pageCount)\r\n    return (\r\n        <div>\r\n            <TaskHeader />\r\n            <div className=\"row justify-content-center pt-3 m-3\">\r\n                <div className=\"col-md-8 mb-3\">\r\n                    <div className=\"d-flex\">\r\n                        <input type=\"text\" placeholder=\"Search by title\" className=\"form-control\" onChange={handleOnChange} />\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    searchTasks.length ?\r\n                        typeof searchTasks !== undefined && searchTasks !== null && slice.map((data, index) => (\r\n                            <TaskTaskDetails Tasks={data} onDeleteTask={() => onDeleteTask(index)} ></TaskTaskDetails>\r\n                        ))\r\n                        :\r\n                        <h1 className=\"text-success text-center\">No task available right now! <br></br>\r\n                            Please add your task or <br></br> Search a valid task\r\n                        </h1>\r\n                }\r\n\r\n\r\n            </div>\r\n            {\r\n                searchTasks.length > 2 && <div className=\"row justify-content-center\">\r\n                    <ReactPaginate\r\n                        previousLabel={\"prev\"}\r\n                        nextLabel={\"next\"}\r\n                        breakLabel={\"...\"}\r\n                        breakClassName={\"break-me\"}\r\n                        pageCount={pageCount}\r\n                        marginPagesDisplayed={2}\r\n                        pageRangeDisplayed={2}\r\n                        onPageChange={handlePageClick}\r\n                        containerClassName={\"pagination\"}\r\n                        subContainerClassName={\"pages pagination\"}\r\n                        activeClassName={\"active\"} />\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Task;","C:\\fnt\\todo-task\\my-app\\src\\components\\UpdateTaskForm.js",["53"],"import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { tasksContext } from '../App';\r\nimport { useContext } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\n\r\nconst UpdateTaskForm = () => {\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [task, setTask] = useContext(tasksContext);\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const [selectedTask, setSelectedTask] = useState(task[id]);\r\n    const handleUpdateTask = (data) => {\r\n        // task[id].id = id;\r\n        task[id].Title = data.Title;\r\n        task[id].Priority = data.Priority;\r\n        setTask(task)\r\n        localStorage.setItem('Tasks', JSON.stringify(task));\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"row justify-content-center mt-S\">\r\n                <div className=\"col-md-8 bg-light p-4\">\r\n                    <h1 className=\"text-center pb-3\">Update Your Task</h1>\r\n                    <form onSubmit={handleSubmit(handleUpdateTask)}>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            name=\"Title\"\r\n                            placeholder=\"Task Title\"\r\n                            defaultValue={selectedTask ? selectedTask.Title : \"Title\"}\r\n                            ref={register({ required: true })}\r\n                        /> <br></br>\r\n                        <span className=\"text-danger\">\r\n                            {errors.Title && \"Task Title is required\"}\r\n                        </span>\r\n                        <select className=\"form-control\" name=\"Priority\" ref={register} defaultValue={selectedTask ? selectedTask.Priority : \"Priority\"}>\r\n                            <option value=\"Low\">Low</option>\r\n                            <option value=\"Mediun\">Medium</option>\r\n                            <option value=\"High\">High</option>\r\n                        </select>\r\n                        {errors.Priority && \"Task Priority is required\"}\r\n                        <br></br>\r\n                        <input className=\"btn btn-success\" type=\"submit\" value=\"Confirm Update\" />\r\n                    </form>\r\n                    <div className=\"text-right\">\r\n                        <Link to='/home'>\r\n                            <button className=\"btn btn-secondary\">Go Back</button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateTaskForm;","C:\\fnt\\todo-task\\my-app\\src\\components\\TaskDetails.js",[],"C:\\fnt\\todo-task\\my-app\\src\\components\\TaskHeader.js",["54"],"import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport { tasksContext } from '../App';\r\nconst TaskHeader = () => {\r\n    const [task, setTask] = useContext(tasksContext);\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"task-header d-flex justify-content-between pl-5 pr-5\">\r\n                <h2 className=\"text-center\">My Tasks</h2>\r\n                {\r\n                    task.length > 0 && <p>Total Tasks : {task.length}</p>\r\n                }\r\n                <Link to=\"/taskForm\">\r\n                    <button className=\"btn btn-primary\">\r\n                        <FontAwesomeIcon icon={faPlusCircle} />\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n            <hr></hr>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskHeader;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":14,"column":8,"nodeType":"61","messageId":"62","endLine":14,"endColumn":13},{"ruleId":"59","severity":1,"message":"63","line":15,"column":8,"nodeType":"61","messageId":"62","endLine":15,"endColumn":21},{"ruleId":"59","severity":1,"message":"64","line":8,"column":12,"nodeType":"61","messageId":"62","endLine":8,"endColumn":16},{"ruleId":"59","severity":1,"message":"65","line":8,"column":18,"nodeType":"61","messageId":"62","endLine":8,"endColumn":25},{"ruleId":"59","severity":1,"message":"66","line":9,"column":11,"nodeType":"61","messageId":"62","endLine":9,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":6,"column":8,"nodeType":"61","messageId":"62","endLine":6,"endColumn":13},{"ruleId":"59","severity":1,"message":"67","line":26,"column":15,"nodeType":"61","messageId":"62","endLine":26,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":58,"column":8,"nodeType":"70","endLine":58,"endColumn":19,"suggestions":"71"},{"ruleId":"59","severity":1,"message":"72","line":13,"column":26,"nodeType":"61","messageId":"62","endLine":13,"endColumn":41},{"ruleId":"59","severity":1,"message":"65","line":8,"column":18,"nodeType":"61","messageId":"62","endLine":8,"endColumn":25},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'ReactPaginate' is defined but never used.","'task' is assigned a value but never used.","'setTask' is assigned a value but never used.","'history' is assigned a value but never used.","'deleteTask' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'perPage' and 'searchTasks.length'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPageCount' needs the current value of 'searchTasks.length'.","ArrayExpression",["75"],"'setSelectedTask' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [pageCount, perPage, searchTasks.length]",{"range":"78","text":"79"},[2041,2052],"[pageCount, perPage, searchTasks.length]"]